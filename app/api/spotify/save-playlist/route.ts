import { supabase } from "@/lib/supabase"
import { type NextRequest, NextResponse } from "next/server"

export async function POST(request: NextRequest) {
  try {
    // Get the authorization header
    const authHeader = request.headers.get("authorization")
    if (!authHeader?.startsWith("Bearer ")) {
      return NextResponse.json({ error: "No authorization header" }, { status: 401 })
    }

    const token = authHeader.replace("Bearer ", "")

    // Verify the session with Supabase
    const {
      data: { user },
      error: authError,
    } = await supabase.auth.getUser(token)

    if (authError || !user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 })
    }

    // Get Spotify access token from user metadata
    const spotifyAccessToken = user.user_metadata?.provider_token

    if (!spotifyAccessToken) {
      return NextResponse.json({ error: "No Spotify access token found" }, { status: 401 })
    }

    const { tracks, name } = await request.json()

    // Get user profile to get user ID
    const profileResponse = await fetch("https://api.spotify.com/v1/me", {
      headers: {
        Authorization: `Bearer ${spotifyAccessToken}`,
      },
    })

    if (!profileResponse.ok) {
      throw new Error("Failed to get user profile")
    }

    const profile = await profileResponse.json()

    // Create playlist
    const createPlaylistResponse = await fetch(`https://api.spotify.com/v1/users/${profile.id}/playlists`, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${spotifyAccessToken}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        name,
        description: "Generated by Playlist Generator",
        public: false,
      }),
    })

    if (!createPlaylistResponse.ok) {
      throw new Error("Failed to create playlist")
    }

    const playlist = await createPlaylistResponse.json()

    // Add tracks to playlist
    const trackUris = tracks.map((track: any) => track.uri)

    const addTracksResponse = await fetch(`https://api.spotify.com/v1/playlists/${playlist.id}/tracks`, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${spotifyAccessToken}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        uris: trackUris,
      }),
    })

    if (!addTracksResponse.ok) {
      throw new Error("Failed to add tracks to playlist")
    }

    // Save playlist info to Supabase for user history
    const { error: insertError } = await supabase.from("playlists").insert({
      user_id: user.id,
      spotify_playlist_id: playlist.id,
      name: playlist.name,
      track_count: tracks.length,
      spotify_url: playlist.external_urls.spotify,
      created_at: new Date().toISOString(),
    })

    if (insertError) {
      console.error("Error saving playlist to database:", insertError)
      // Don't fail the request if database save fails
    }

    return NextResponse.json({
      success: true,
      playlist: {
        id: playlist.id,
        name: playlist.name,
        url: playlist.external_urls.spotify,
      },
    })
  } catch (error) {
    console.error("Error saving playlist:", error)
    return NextResponse.json({ error: "Failed to save playlist" }, { status: 500 })
  }
}
